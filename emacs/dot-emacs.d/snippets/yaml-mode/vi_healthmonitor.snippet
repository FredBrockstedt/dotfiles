# -*- mode: snippet -*-
# name: Module for setup of HealthMonitor Avi RESTful Object
# prefix: avi_healthmonitor_snippet
# key: vi_healthmonitor
# group: ansible
# --

- name: ${0:Module for setup of HealthMonitor Avi RESTful Object}
  avi_healthmonitor:                                                       
    name: ${1:A user friendly name for this health monitor}                #
    type: ${2:Type of the health monitor}                                  # Enum options - HEALTH_MONITOR_PING, HEALTH_MONITOR_TCP, HEALTH_MONITOR_HTTP, HEALTH_MONITOR_HTTPS, HEALTH_MONITOR_EXTERN
    state: ${3$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  The state that should be applied on the entity 
    avi_api_update_method: ${4$$(yas-choose-value '("put" "patch"))}       # choices: put;patch  Default method for object update is HTTP PUT  Setting to patch will override that behavior to use HT
    avi_api_patch_op: ${5$$(yas-choose-value '("add" "replace" "delete"))} # choices: add;replace;delete  Patch operation to use when using avi_api_update_method as patch 
    description: ${6:value}                                                # User defined description for the object 
    dns_monitor: ${7:value}                                                # Healthmonitordns settings for healthmonitor 
    external_monitor: ${8:value}                                           # Healthmonitorexternal settings for healthmonitor 
    failed_checks: ${9:value}                                              # Number of continuous failed health checks before the server is marked down  Allowed values are 1-50  Default value when 
    http_monitor: ${10:value}                                              # Healthmonitorhttp settings for healthmonitor 
    https_monitor: ${11:value}                                             # Healthmonitorhttp settings for healthmonitor 
    is_federated: ${12:value}                                              # This field describes the object's replication scope  If the field is set to false, then the object is visible within the
    monitor_port: ${13:value}                                              # Use this port instead of the port defined for the server in the pool  If the monitor succeeds to this port, the load bal
    radius_monitor: ${14:value}                                            # Health monitor for radius  Field introduced in 18 2 3 
    receive_timeout: ${15:value}                                           # A valid response from the server is expected within the receive timeout window  This timeout must be less than the send 
    send_interval: ${16:value}                                             # Frequency, in seconds, that monitors are sent to a server  Allowed values are 1-3600  Default value when not specified i
    sip_monitor: ${17:value}                                               # Health monitor for sip  Field introduced in 17 2 8, 18 1 3, 18 2 1 
    successful_checks: ${18:value}                                         # Number of continuous successful health checks before server is marked up  Allowed values are 1-50  Default value when no
    tcp_monitor: ${19:value}                                               # Healthmonitortcp settings for healthmonitor 
    tenant_ref: ${20:value}                                                # It is a reference to an object of type tenant 
    udp_monitor: ${21:value}                                               # Healthmonitorudp settings for healthmonitor 
    url: ${22:value}                                                       # Avi controller URL of the object 
    uuid: ${23:value}                                                      # Uuid of the health monitor 
    controller: ${24:}                                                     # IP address or hostname of the controller  The default value is the environment variable C(AVI_CONTROLLER) 
    username: ${25:}                                                       # Username used for accessing Avi controller  The default value is the environment variable C(AVI_USERNAME) 
    password: ${26:}                                                       # Password of Avi user in Avi controller  The default value is the environment variable C(AVI_PASSWORD) 
    tenant: ${27:admin}                                                    # Name of tenant used for all Avi API calls and context of object 
    tenant_uuid: ${28:}                                                    # UUID of tenant used for all Avi API calls and context of object 
    api_version: ${{29:16}                                                 #4 4} # not required  Avi API version of to use for Avi API and objects 
    avi_credentials: ${30:value}                                           # Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details 
    api_context: ${31:value}                                               # Avi API context that includes current session ID and CSRF Token  This allows user to perform single login and re-use the
    avi_disable_session_cache_as_fact: ${32:value}                         # It disables avi session information to be cached as a fact 
