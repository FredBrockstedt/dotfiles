# -*- mode: snippet -*-
# name: Module to manage virtual machine templates in oVirt/RHV
# prefix: ovirt_template_snippet
# key: ovirt_templat
# group: ansible
# --

- name: ${0:Module to manage virtual machine templates in oVirt/RHV}
  ovirt_template:                                                          
    auth: ${1:Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}#
    name: ${2:value}                                                       # Name of the template to manage 
    id: ${3:value}                                                         # ID of the template to be registered 
    state: ${4$$(yas-choose-value '("present" "absent" "exported" "imported" "registered"))}# choices: present;absent;exported;imported;registered  Should the template be present/absent/exported/im
    vm: ${5:value}                                                         # Name of the VM, which will be used to create template 
    description: ${6:value}                                                # Description of the template 
    cpu_profile: ${7:value}                                                # CPU profile to be set to template 
    cluster: ${8:value}                                                    # Name of the cluster, where template should be created/imported 
    allow_partial_import: ${9:value}                                       # Boolean indication whether to allow partial registration of a template when C(state) is registered 
    vnic_profile_mappings: ${10:value}                                     # Mapper which maps an external virtual NIC profile to one that exists in the engine when C(state) is registered  vnic_pro
    cluster_mappings: ${11:value}                                          # Mapper which maps cluster name between Template's OVF and the destination cluster this Template should be registered to,
    role_mappings: ${12:value}                                             # Mapper which maps role name between Template's OVF and the destination role this Template should be registered to, relev
    domain_mappings: ${13:value}                                           # Mapper which maps aaa domain name between Template's OVF and the destination aaa domain this Template should be register
    exclusive: ${14:value}                                                 # When C(state) is I(exported) this parameter indicates if the existing templates with the same name should be overwritten
    export_domain: ${15:value}                                             # When C(state) is I(exported) or I(imported) this parameter specifies the name of the export storage domain 
    image_provider: ${16:value}                                            # When C(state) is I(imported) this parameter specifies the name of the image provider to be used 
    image_disk: ${17:value}                                                # When C(state) is I(imported) and C(image_provider) is used this parameter specifies the name of disk to be imported as t
    io_threads: ${18:value}                                                # Number of IO threads used by virtual machine  I(0) means IO threading disabled 
    template_image_disk_name: ${19:value}                                  # When C(state) is I(imported) and C(image_provider) is used this parameter specifies the new name for imported disk, if o
    storage_domain: ${20:value}                                            # When C(state) is I(imported) this parameter specifies the name of the destination data storage domain  When C(state) is 
    clone_permissions: ${21:False}                                         # If I(True) then the permissions of the VM (only the direct ones, not the inherited ones) will be copied to the created t
    seal: ${22:False}                                                      # 'Sealing' is an operation that erases all machine-specific configurations from a filesystem: This includes SSH keys, UDE
    operating_system: ${23:value}                                          # Operating system of the template  Default value is set by oVirt/RHV engine  Possible values are: debian_7, freebsd, free
    memory: ${24:value}                                                    # Amount of memory of the template  Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB) 
    memory_guaranteed: ${25:value}                                         # Amount of minimal guaranteed memory of the template  Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB)  C(mem
    memory_max: ${26:value}                                                # Upper bound of template memory up to which memory hot-plug can be performed  Prefix uses IEC 60027-2 standard (for examp
    version: ${27:value}                                                   # C(name) - The name of this version  C(number) - The index of this version in the versions hierarchy of the template  Use
    clone_name: ${28:value}                                                # Name for importing Template from storage domain  If not defined, C(name) will be used 
    usb_support: ${29:value}                                               # I(True) enable USB support, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    timezone: ${30:value}                                                  # Sets time zone offset of the guest hardware clock  For example C(Etc/GMT)
    sso: ${31:value}                                                       # I(True) enable Single Sign On by Guest Agent, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    soundcard_enabled: ${32:value}                                         # If I(true), the sound card is added to the virtual machine 
    smartcard_enabled: ${33:value}                                         # If I(true), use smart card authentication 
    cloud_init: ${34:value}                                                # Dictionary with values for Unix-like Virtual Machine initialization using cloud init 
    cloud_init_nics: ${35:value}                                           # List of dictionaries representing network interfaces to be setup by cloud init  This option is used, when user needs to 
    ballooning_enabled: ${36:value}                                        # If I(true), use memory ballooning  Memory balloon is a guest device, which may be used to re-distribute / reclaim the ho
    nics: ${37:value}                                                      # List of NICs, which should be attached to Virtual Machine  NIC is described by following dictionary 
    sysprep: ${38:value}                                                   # Dictionary with values for Windows Virtual Machine initialization using sysprep 
    wait: ${39:True}                                                       # C(yes) if the module should wait for the entity to get into desired state 
    fetch_nested: ${40:value}                                              # If I(True) the module will fetch additional data from the API  It will fetch IDs of the VMs disks, snapshots, etc  User 
    nested_attributes: ${41:value}                                         # Specifies list of the attributes which should be fetched from the API  This parameter apply only when C(fetch_nested) is
    timeout: ${42:180}                                                     # The amount of time in seconds the module should wait for the instance to get into desired state 
    poll_interval: ${43:3}                                                 # Number of the seconds the module waits until another poll request on entity status is sent 
