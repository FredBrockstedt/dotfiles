# -*- mode: snippet -*-
# name: Manages packages with the I(dnf) package manager
# prefix: dnf_snippet
# key: dnf
# group: ansible
# --

- name: ${0:Manages packages with the I(dnf) package manager}
  dnf:                                                                     
    name: ${1:A package name or package specifier with version, like C(name-1}#0)  When using state=latest, this can be '*' which means run: dnf -y update  You can also pass a url or a local path t
    list: ${2:value}                                                       # Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks  See examples 
    state: ${3$$(yas-choose-value '("absent" "present" "installed" "removed" "latest"))}# choices: absent;present;installed;removed;latest  Whether to install (C(present), C(latest)), or remove (C(
    enablerepo: ${4:value}                                                 # I(Repoid) of repositories to enable for the install/update operation  These repos will not persist beyond the transactio
    disablerepo: ${5:value}                                                # I(Repoid) of repositories to disable for the install/update operation  These repos will not persist beyond the transacti
    conf_file: ${6:value}                                                  # The remote dnf configuration file to use for the transaction 
    disable_gpg_check: ${7:false}                                          # Whether to disable the GPG checking of signatures of packages being installed  Has an effect only if state is I(present)
    installroot: ${8:/}                                                    # Specifies an alternative installroot, relative to which all packages will be installed 
    releasever: ${9:value}                                                 # Specifies an alternative release from which all packages will be installed 
    autoremove: ${10:false}                                                # If C(yes), removes all "leaf" packages from the system that were originally installed as dependencies of user-installed 
    exclude: ${11:value}                                                   # Package name(s) to exclude when state=present, or latest  This can be a list or a comma separated string 
    skip_broken: ${12:false}                                               # Skip packages with broken dependencies(devsolve) and are causing problems 
    update_cache: ${13:false}                                              # Force dnf to check if cache is out of date and redownload if needed  Has an effect only if state is I(present) or I(late
    update_only: ${14:false}                                               # When using latest, only update installed packages  Do not install packages  Has an effect only if state is I(latest)
    security: ${15:false}                                                  # If set to C(yes), and C(state=latest) then only installs updates that have been marked security related 
    bugfix: ${16:false}                                                    # If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related 
    enable_plugin: ${17:value}                                             # I(Plugin) name to enable for the install/update operation  The enabled plugin will not persist beyond the transaction 
    disable_plugin: ${18:value}                                            # I(Plugin) name to disable for the install/update operation  The disabled plugins will not persist beyond the transaction
    disable_excludes: ${19:value}                                          # Disable the excludes defined in DNF config files  If set to C(all), disables all excludes  If set to C(main), disable ex
    validate_certs: ${20:true}                                             # This only applies if using a https url as the source of the rpm  e g  for localinstall  If set to C(no), the SSL certifi
    allow_downgrade: ${21:false}                                           # Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that packag
    install_repoquery: ${22:true}                                          # This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compati
    download_only: ${23:false}                                             # Only download the packages, do not install them 
    lock_timeout: ${24:30}                                                 # Amount of time to wait for the dnf lockfile to be freed 
    install_weak_deps: ${25:true}                                          # Will also install all packages linked by a weak dependency relation 
    download_dir: ${26:value}                                              # Specifies an alternate directory to store packages  Has an effect only if I(download_only) is specified 
