# -*- mode: snippet -*-
# name: Module to manage Virtual Machines in oVirt/RHV
# prefix: ovirt_vm_snippet
# key: ovirt_vm
# group: ansible
# --

- name: ${0:Module to manage Virtual Machines in oVirt/RHV}
  ovirt_vm:                                                                
    auth: ${1:Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}#
    name: ${2:value}                                                       # Name of the Virtual Machine to manage  If VM don't exists C(name) is required  Otherwise C(id) or C(name) can be used 
    id: ${3:value}                                                         # ID of the Virtual Machine to manage 
    state: ${4$$(yas-choose-value '("absent" "next_run" "present" "registered" "running" "stopped" "suspended" "exported"))}# choices: absent;next_run;present;registered;running;stopped;suspended;e
    cluster: ${5:value}                                                    # Name of the cluster, where Virtual Machine should be created  Required if creating VM 
    allow_partial_import: ${6:value}                                       # Boolean indication whether to allow partial registration of Virtual Machine when C(state) is registered 
    vnic_profile_mappings: ${7:value}                                      # Mapper which maps an external virtual NIC profile to one that exists in the engine when C(state) is registered  vnic_pro
    cluster_mappings: ${8:value}                                           # Mapper which maps cluster name between VM's OVF and the destination cluster this VM should be registered to, relevant wh
    role_mappings: ${9:value}                                              # Mapper which maps role name between VM's OVF and the destination role this VM should be registered to, relevant when C(s
    domain_mappings: ${10:value}                                           # Mapper which maps aaa domain name between VM's OVF and the destination aaa domain this VM should be registered to, relev
    affinity_group_mappings: ${11:value}                                   # Mapper which maps affinity name between VM's OVF and the destination affinity this VM should be registered to, relevant 
    affinity_label_mappings: ${12:value}                                   # Mapper which maps affinity label name between VM's OVF and the destination label this VM should be registered to, releva
    lun_mappings: ${13:value}                                              # Mapper which maps lun between VM's OVF and the destination lun this VM should contain, relevant when C(state) is registe
    reassign_bad_macs: ${14:value}                                         # Boolean indication whether to reassign bad macs when C(state) is registered 
    template: ${15:value}                                                  # Name of the template, which should be used to create Virtual Machine  Required if creating VM  If template is not specif
    template_version: ${16:value}                                          # Version number of the template to be used for VM  By default the latest available version of the template is used 
    use_latest_template_version: ${17:value}                               # Specify if latest template version should be used, when running a stateless VM  If this parameter is set to I(yes) state
    storage_domain: ${18:value}                                            # Name of the storage domain where all template disks should be created  This parameter is considered only when C(template
    disk_format: ${19$$(yas-choose-value '("cow" "raw"))}                  # choices: cow;raw  Specify format of the disk  If C(cow) format is used, disk will by created as sparse, so space will be
    memory: ${20:value}                                                    # Amount of memory of the Virtual Machine  Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB)  Default value is 
    memory_guaranteed: ${21:value}                                         # Amount of minimal guaranteed memory of the Virtual Machine  Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB)
    memory_max: ${22:value}                                                # Upper bound of virtual machine memory up to which memory hot-plug can be performed  Prefix uses IEC 60027-2 standard (fo
    cpu_shares: ${23:value}                                                # Set a CPU shares for this Virtual Machine  Default value is set by oVirt/RHV engine 
    cpu_cores: ${24:value}                                                 # Number of virtual CPUs cores of the Virtual Machine  Default value is set by oVirt/RHV engine 
    cpu_sockets: ${25:value}                                               # Number of virtual CPUs sockets of the Virtual Machine  Default value is set by oVirt/RHV engine 
    cpu_threads: ${26:value}                                               # Number of threads per core of the Virtual Machine  Default value is set by oVirt/RHV engine 
    type: ${27$$(yas-choose-value '("desktop" "server" "high_performance"))}# choices: desktop;server;high_performance  Type of the Virtual Machine  Default value is set by oVirt/RHV engine  I(high
    quota_id: ${28:value}                                                  # Virtual Machine quota ID to be used for disk  By default quota is chosen by oVirt/RHV engine 
    operating_system: ${29:value}                                          # Operating system of the Virtual Machine  Default value is set by oVirt/RHV engine  Possible values: debian_7, freebsd, f
    boot_devices: ${30$$(yas-choose-value '("cdrom" "hd" "network"))}      # choices: cdrom;hd;network  List of boot devices which should be used to boot  For example C([ cdrom, hd ])  Default valu
    boot_menu: ${31:value}                                                 # I(True) enable menu to select boot device, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    usb_support: ${32:value}                                               # I(True) enable USB support, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    serial_console: ${33:value}                                            # I(True) enable VirtIO serial console, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    sso: ${34:value}                                                       # I(True) enable Single Sign On by Guest Agent, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    host: ${35:value}                                                      # Specify host where Virtual Machine should be running  By default the host is chosen by engine scheduler  This parameter 
    high_availability: ${36:value}                                         # If I(yes) Virtual Machine will be set as highly available  If I(no) Virtual Machine won't be set as highly available  If
    high_availability_priority: ${37:value}                                # Indicates the priority of the virtual machine inside the run and migration queues  Virtual machines with higher prioriti
    lease: ${38:value}                                                     # Name of the storage domain this virtual machine lease reside on  Pass an empty string to remove the lease  NOTE - Suppor
    custom_compatibility_version: ${39:value}                              # Enables a virtual machine to be customized to its own compatibility version  If 'C(custom_compatibility_version)' is set
    host_devices: ${40:value}                                              # Single Root I/O Virtualization - technology that allows single device to expose multiple endpoints that can be passed to
    delete_protected: ${41:value}                                          # If I(yes) Virtual Machine will be set as delete protected  If I(no) Virtual Machine won't be set as delete protected  If
    stateless: ${42:value}                                                 # If I(yes) Virtual Machine will be set as stateless  If I(no) Virtual Machine will be unset as stateless  If no value is 
    clone: ${43:false}                                                     # If I(yes) then the disks of the created virtual machine will be cloned and independent of the template  This parameter i
    clone_permissions: ${44:false}                                         # If I(yes) then the permissions of the template (only the direct ones, not the inherited ones) will be copied to the crea
    cd_iso: ${45:value}                                                    # ISO file from ISO storage domain which should be attached to Virtual Machine  If you pass empty string the CD will be ej
    force: ${46:false}                                                     # Please check to I(Synopsis) to more detailed description of force parameter, it can behave differently in different situ
    nics: ${47:value}                                                      # List of NICs, which should be attached to Virtual Machine  NIC is described by following dictionary 
    disks: ${48:value}                                                     # List of disks, which should be attached to Virtual Machine  Disk is described by following dictionary 
    sysprep: ${49:value}                                                   # Dictionary with values for Windows Virtual Machine initialization using sysprep 
    cloud_init: ${50:value}                                                # Dictionary with values for Unix-like Virtual Machine initialization using cloud init 
    cloud_init_nics: ${51:value}                                           # List of dictionaries representing network interfaces to be setup by cloud init  This option is used, when user needs to 
    cloud_init_persist: ${52:false}                                        # If I(yes) the C(cloud_init) or C(sysprep) parameters will be saved for the virtual machine and the virtual machine won't
    kernel_params_persist: ${53:value}                                     # If I(true) C(kernel_params), C(initrd_path) and C(kernel_path) will persist in virtual machine configuration, if I(False
    kernel_path: ${54:value}                                               # Path to a kernel image used to boot the virtual machine  Kernel image must be stored on either the ISO domain or on the 
    initrd_path: ${55:value}                                               # Path to an initial ramdisk to be used with the kernel specified by C(kernel_path) option  Ramdisk image must be stored o
    kernel_params: ${56:value}                                             # Kernel command line parameters (formatted as string) to be used with the kernel specified by C(kernel_path) option 
    instance_type: ${57:value}                                             # Name of virtual machine's hardware configuration  By default no instance type is used 
    description: ${58:value}                                               # Description of the Virtual Machine 
    comment: ${59:value}                                                   # Comment of the Virtual Machine 
    timezone: ${60:value}                                                  # Sets time zone offset of the guest hardware clock  For example C(Etc/GMT)
    serial_policy: ${61$$(yas-choose-value '("vm" "host" "custom"))}       # choices: vm;host;custom  Specify a serial number policy for the Virtual Machine  Following options are supported  C(vm) 
    serial_policy_value: ${62:value}                                       # Allows you to specify a custom serial number  This parameter is used only when C(serial_policy) is I(custom) 
    vmware: ${63:value}                                                    # Dictionary of values to be used to connect to VMware and import a virtual machine to oVirt 
    xen: ${64:value}                                                       # Dictionary of values to be used to connect to XEN and import a virtual machine to oVirt 
    kvm: ${65:value}                                                       # Dictionary of values to be used to connect to kvm and import a virtual machine to oVirt 
    cpu_mode: ${66:value}                                                  # CPU mode of the virtual machine  It can be some of the following: I(host_passthrough), I(host_model) or I(custom)  For I
    placement_policy: ${67:value}                                          # The configuration of the virtual machine's placement policy  If no value is passed, default value is set by oVirt/RHV en
    ticket: ${68:value}                                                    # If I(true), in addition return I(remote_vv_file) inside I(vm) dictionary, which contains compatible content for remote-v
    cpu_pinning: ${69:value}                                               # CPU Pinning topology to map virtual machine CPU to host CPU  CPU Pinning topology is a list of dictionary which can have
    soundcard_enabled: ${70:value}                                         # If I(true), the sound card is added to the virtual machine 
    smartcard_enabled: ${71:value}                                         # If I(true), use smart card authentication 
    io_threads: ${72:value}                                                # Number of IO threads used by virtual machine  I(0) means IO threading disabled 
    ballooning_enabled: ${73:value}                                        # If I(true), use memory ballooning  Memory balloon is a guest device, which may be used to re-distribute / reclaim the ho
    numa_tune_mode: ${74$$(yas-choose-value '("interleave" "preferred" "strict"))}# choices: interleave;preferred;strict  Set how the memory allocation for NUMA nodes of this VM is applied (relevan
    numa_nodes: ${75:value}                                                # List of vNUMA Nodes to set for this VM and pin them to assigned host's physical NUMA node  Each vNUMA node is described 
    rng_device: ${76:value}                                                # Random number generator (RNG)  You can choose of one the following devices I(urandom), I(random) or I(hwrng)  In order t
    custom_properties: ${77:value}                                         # Properties sent to VDSM to configure various hooks  Custom properties is a list of dictionary which can have following v
    watchdog: ${78:value}                                                  # Assign watchdog device for the virtual machine  Watchdogs is a dictionary which can have following values:
    graphical_console: ${79:value}                                         # Assign graphical console to the virtual machine 
    exclusive: ${80:value}                                                 # When C(state) is I(exported) this parameter indicates if the existing VM with the same name should be overwritten 
    export_domain: ${81:value}                                             # When C(state) is I(exported)this parameter specifies the name of the export storage domain 
    export_ova: ${82:value}                                                # Dictionary of values to be used to export VM as OVA 
    force_migrate: ${83:value}                                             # If I(true), the VM will migrate when I(placement_policy=user-migratable) but not when I(placement_policy=pinned) 
    migrate: ${84:value}                                                   # If I(true), the VM will migrate to any available host 
    next_run: ${85:value}                                                  # If I(true), the update will not be applied to the VM immediately and will be only applied when virtual machine is restar
    snapshot_name: ${86:value}                                             # Snapshot to clone VM from  Snapshot with description specified should exist  You have to specify C(snapshot_vm) paramete
    snapshot_vm: ${87:value}                                               # Source VM to clone VM from  VM should have snapshot specified by C(snapshot)  If C(snapshot_name) specified C(snapshot_v
    wait: ${88:True}                                                       # C(yes) if the module should wait for the entity to get into desired state 
    fetch_nested: ${89:value}                                              # If I(True) the module will fetch additional data from the API  It will fetch IDs of the VMs disks, snapshots, etc  User 
    nested_attributes: ${90:value}                                         # Specifies list of the attributes which should be fetched from the API  This parameter apply only when C(fetch_nested) is
    timeout: ${91:180}                                                     # The amount of time in seconds the module should wait for the instance to get into desired state 
    poll_interval: ${92:3}                                                 # Number of the seconds the module waits until another poll request on entity status is sent 
