# -*- mode: snippet -*-
# name: Manage Direct Connect LAG bundles.
# prefix: aws_direct_connect_link_aggregation_group_snippet
# key: ws_direct_connect_link_aggregation_group
# group: ansible
# --

- name: ${0:Manage Direct Connect LAG bundles.}
  aws_direct_connect_link_aggregation_group:                               
    state: ${1$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  The state of the Direct Connect link aggregation group 
    name: ${2:value}                                                       # The name of the Direct Connect link aggregation group 
    link_aggregation_group_id: ${3:value}                                  # The ID of the Direct Connect link aggregation group 
    num_connections: ${4:value}                                            # The number of connections with which to initialize the link aggregation group 
    min_links: ${5:value}                                                  # The minimum number of physical connections that must be operational for the LAG itself to be operational 
    location: ${6:value}                                                   # The location of the link aggregation group 
    bandwidth: ${7:value}                                                  # The bandwidth of the link aggregation group 
    force_delete: ${8:value}                                               # This allows the minimum number of links to be set to 0, any hosted connections disassociated, and any virtual interfaces
    connection_id: ${9:value}                                              # A connection ID to link with the link aggregation group upon creation 
    delete_with_disassociation: ${10:value}                                # To be used with I(state=absent) to delete connections after disassociating them with the LAG 
    wait: ${11:value}                                                      # Whether or not to wait for the operation to complete  May be useful when waiting for virtual interfaces to be deleted  M
    wait_timeout: ${12:120}                                                # The duration in seconds to wait if I(wait) is True 
    debug_botocore_endpoint_logs: ${13:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${14:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${15:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${16:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${17:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${18:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${19:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${20:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
