# -*- mode: snippet -*-
# name: Create or delete AWS scaling policies for Autoscaling groups
# prefix: ec2_scaling_policy_snippet
# key: c2_scaling_policy
# group: ansible
# --

- name: ${0:Create or delete AWS scaling policies for Autoscaling groups}
  ec2_scaling_policy:                                                      
    state: ${1$$(yas-choose-value '("present" "absent"))}                  # register or deregister the policy
    name: ${2:Unique name for the scaling policy}                          #
    asg_name: ${3:Name of the associated autoscaling group}                #
    adjustment_type: ${4$$(yas-choose-value '("ChangeInCapacity" "ExactCapacity" "PercentChangeInCapacity"))}# choices: ChangeInCapacity;ExactCapacity;PercentChangeInCapacity  The type of change in
    scaling_adjustment: ${5:value}                                         # The amount by which the autoscaling group is adjusted by the policy
    min_adjustment_step: ${6:value}                                        # Minimum amount of adjustment when policy is triggered
    cooldown: ${7:value}                                                   # The minimum period of time between which autoscaling actions can take place
    debug_botocore_endpoint_logs: ${8:false}                               # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${9:value}                                                    # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${10:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${11:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${12:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${13:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${14:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${15:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
