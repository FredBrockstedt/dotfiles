# -*- mode: snippet -*-
# name: Manage User Managed IAM policies
# prefix: iam_managed_policy_snippet
# key: m_managed_policy
# group: ansible
# --

- name: ${0:Manage User Managed IAM policies}
  iam_managed_policy:                                                      
    policy_name: ${1:The name of the managed policy}                       #
    policy_description: ${2:}                                              # A helpful description of this policy, this value is immutable and only set when creating a new policy 
    policy: ${3:value}                                                     # A properly json formatted policy
    make_default: ${4:True}                                                # Make this revision the default revision 
    only_version: ${5:False}                                               # Remove all other non default revisions, if this is used with C(make_default) it will result in all other versions of thi
    state: ${6$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Should this managed policy be present or absent  Set to absent to detach all entities from this
    fail_on_delete: ${7:value}                                             # The I(fail_on_delete) option does nothing 
    debug_botocore_endpoint_logs: ${8:false}                               # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${9:value}                                                    # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${10:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${11:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${12:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${13:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${14:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${15:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
