# -*- mode: snippet -*-
# name: Manage Azure storage accounts
# prefix: azure_rm_storageaccount_snippet
# key: zure_rm_storageaccount
# group: ansible
# --

- name: ${0:Manage Azure storage accounts}
  azure_rm_storageaccount:                                                 
    resource_group: ${1:Name of the resource group to use}                 #
    name: ${2:value}                                                       # Name of the storage account to update or create 
    state: ${3$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  State of the storage account  Use C(present) to create or update a storage account and use C(ab
    location: ${4:value}                                                   # Valid Azure location  Defaults to location of the resource group 
    account_type: ${5$$(yas-choose-value '("Premium_LRS" "Standard_GRS" "Standard_LRS" "StandardSSD_LRS" "Standard_RAGRS" "Standard_ZRS" "Premium_ZRS"))}# choices: Premium_LRS;Standard_GRS;Standard
    custom_domain: ${6:value}                                              # User domain assigned to the storage account  Must be a dictionary with I(name) and I(use_sub_domain) keys where I(name) 
    kind: ${7$$(yas-choose-value '("Storage" "StorageV2" "BlobStorage"))}  # choices: Storage;StorageV2;BlobStorage  The kind of storage 
    access_tier: ${8$$(yas-choose-value '("Hot" "Cool"))}                  # choices: Hot;Cool  The access tier for this storage account  Required when I(kind=BlobStorage) 
    force_delete_nonempty: ${9:value}                                      # Attempt deletion if resource already exists and cannot be updated 
    https_only: ${10:value}                                                # Allows https traffic only to storage service when set to C(true) 
    blob_cors: ${11:value}                                                 # Specifies CORS rules for the Blob service  You can include up to five CorsRule elements in the request  If no blob_cors 
    ad_user: ${12:value}                                                   # Active Directory username  Use when authenticating with an Active Directory user rather than service principal 
    password: ${13:value}                                                  # Active Directory user password  Use when authenticating with an Active Directory user rather than service principal 
    profile: ${14:value}                                                   # Security profile found in ~/ azure/credentials file 
    subscription_id: ${15:value}                                           # Your Azure subscription Id 
    client_id: ${16:value}                                                 # Azure client ID  Use when authenticating with a Service Principal 
    secret: ${17:value}                                                    # Azure client secret  Use when authenticating with a Service Principal 
    tenant: ${18:value}                                                    # Azure tenant ID  Use when authenticating with a Service Principal 
    cloud_environment: ${19:AzureCloud}                                    # For cloud environments other than the US public cloud, the environment name (as defined by Azure Python SDK, eg, C(Azure
    adfs_authority_url: ${20:value}                                        # Azure AD authority url  Use when authenticating with Username/password, and has your own ADFS authority 
    cert_validation_mode: ${21$$(yas-choose-value '("ignore" "validate"))} # choices: ignore;validate  Controls the certificate validation behavior for Azure endpoints  By default, all modules will
    auth_source: ${22$$(yas-choose-value '("auto" "cli" "credential_file" "env" "msi"))}# choices: auto;cli;credential_file;env;msi  Controls the source of the credentials to use for authentication
    api_profile: ${23:latest}                                              # Selects an API profile to use when communicating with Azure services  Default value of C(latest) is appropriate for publ
    tags: ${24:value}                                                      # Dictionary of string:string pairs to assign as metadata to the object  Metadata tags on the object will be updated with 
    append_tags: ${25:True}                                                # Use to control if tags field is canonical or just appends to existing tags  When canonical, any tags not found in the ta
