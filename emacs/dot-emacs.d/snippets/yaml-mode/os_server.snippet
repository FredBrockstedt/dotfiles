# -*- mode: snippet -*-
# name: Create/Delete Compute Instances from OpenStack
# prefix: os_server_snippet
# key: os_server
# group: ansible
# --

- name: ${0:Create/Delete Compute Instances from OpenStack}
  os_server:                                                               
    name: ${1:Name that has to be given to the instance}                   # It is also possible to specify the ID of the instance instead of its name if I(state) is I(absent) 
    image: ${2:The name or id of the base image to boot}                   #
    image_exclude: ${3:value}                                              # Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common id
    flavor: ${4:1}                                                         # The name or id of the flavor in which the new instance has to be created  Mutually exclusive with flavor_ram
    flavor_ram: ${5:1}                                                     # The minimum amount of ram in MB that the flavor in which the new instance has to be created must have  Mutually exclusiv
    flavor_include: ${6:value}                                             # Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same
    key_name: ${7:value}                                                   # The key pair name to be used when creating a instance
    security_groups: ${8:value}                                            # Names of the security groups to which the instance should be added  This may be a YAML list or a comma separated string 
    network: ${9:value}                                                    # Name or ID of a network to attach this instance to  A simpler version of the nics parameter, only one of network or nics
    nics: ${10:value}                                                      # A list of networks to which the instance's interface should be attached  Networks may be referenced by net-id/net-name/p
    auto_ip: ${11:true}                                                    # Ensure instance has public ip however the cloud wants to do that
    floating_ips: ${12:value}                                              # list of valid floating IPs that pre-exist to assign to this node
    floating_ip_pools: ${13:value}                                         # Name of floating IP pool from which to choose a floating IP
    meta: ${14:value}                                                      # A list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key
    wait: ${15:true}                                                       # If the module should wait for the instance to be created 
    timeout: ${16:180}                                                     # The amount of time the module should wait for the instance to get into active state 
    config_drive: ${17:false}                                              # Whether to boot the server with config drive enabled
    userdata: ${18:value}                                                  # Opaque blob of data which is made available to the instance
    boot_from_volume: ${19:false}                                          # Should the instance boot from a persistent volume created based on the image given  Mutually exclusive with boot_volume 
    volume_size: ${20:value}                                               # The size of the volume to create in GB if booting from volume based on an image 
    boot_volume: ${21:value}                                               # Volume name or id to use as the volume to boot from  Implies boot_from_volume  Mutually exclusive with image and boot_fr
    terminate_volume: ${22:false}                                          # If C(yes), delete volume when deleting instance (if booted from volume)
    volumes: ${23:[]}                                                      # A list of preexisting volumes names or ids to attach to the instance
    scheduler_hints: ${24:value}                                           # Arbitrary key/value pairs to the scheduler for custom use
    state: ${25$$(yas-choose-value '("present" "absent"))}                 # choices: present;absent  Should the resource be present or absent 
    delete_fip: ${26:false}                                                # When I(state) is absent and this option is true, any floating IP associated with the instance will be deleted along with
    reuse_ips: ${27:true}                                                  # When I(auto_ip) is true and this option is true, the I(auto_ip) code will attempt to re-use unassigned floating ips in t
    availability_zone: ${28:value}                                         # Availability zone in which to create the server 
    cloud: ${29:value}                                                     # Named cloud or cloud config to operate against  If I(cloud) is a string, it references a named cloud config as defined i
    auth: ${30:value}                                                      # Dictionary containing auth information as needed by the cloud's auth plugin strategy  For the default I(password) plugin
    auth_type: ${31:value}                                                 # Name of the auth plugin to use  If the cloud uses something other than password authentication, the name of the plugin s
    region_name: ${32:value}                                               # Name of the region 
    api_timeout: ${33:value}                                               # How long should the socket layer wait before timing out for API calls  If this is omitted, nothing will be passed to the
    validate_certs: ${34:False}                                            # Whether or not SSL API requests should be verified  Before Ansible 2 3 this defaulted to C(yes) 
    ca_cert: ${35:value}                                                   # A path to a CA Cert bundle that can be used as part of verifying SSL API requests 
    client_cert: ${36:value}                                               # A path to a client certificate to use as part of the SSL transaction 
    client_key: ${37:value}                                                # A path to a client key to use as part of the SSL transaction 
    interface: ${38$$(yas-choose-value '("admin" "internal" "public"))}    # choices: admin;internal;public  Endpoint URL type to fetch from the service catalog 
