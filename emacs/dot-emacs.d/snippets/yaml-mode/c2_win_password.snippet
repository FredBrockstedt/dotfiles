# -*- mode: snippet -*-
# name: gets the default administrator password for ec2 windows instances
# prefix: ec2_win_password_snippet
# key: c2_win_password
# group: ansible
# --

- name: ${0:gets the default administrator password for ec2 windows instances}
  ec2_win_password:                                                        
    instance_id: ${1:The instance id to get the password data from}        #
    key_file: ${2:value}                                                   # Path to the file containing the key pair used on the instance, conflicts with key_data 
    key_data: ${3:value}                                                   # Variable that references the private key (usually stored in vault), conflicts with key_file 
    key_passphrase: ${4:value}                                             # The passphrase for the instance key pair  The key must use DES or 3DES encryption for this module to decrypt it  You can
    wait: ${5:false}                                                       # Whether or not to wait for the password to be available before returning 
    wait_timeout: ${6:120}                                                 # Number of seconds to wait before giving up 
    debug_botocore_endpoint_logs: ${7:false}                               # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${8:value}                                                    # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${9:value}                                             # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${10:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${11:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${12:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${13:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${14:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
