# -*- mode: snippet -*-
# name: Generate OpenSSL private keys
# prefix: openssl_privatekey_snippet
# key: openssl_privatekey
# group: ansible
# --

- name: ${0:Generate OpenSSL private keys}
  openssl_privatekey:                                                      
    path: ${1:Name of the file in which the generated TLS/SSL private key will be written}# It will have 0600 mode 
    state: ${2$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  Whether the private key should exist or not, taking action if the state is different from what 
    size: ${3:4096}                                                        # Size (in bits) of the TLS/SSL key to generate 
    type: ${4$$(yas-choose-value '("DSA" "ECC" "Ed25519" "Ed448" "RSA" "X25519" "X448"))}# choices: DSA;ECC;Ed25519;Ed448;RSA;X25519;X448  The algorithm used to generate the TLS/SSL private key  No
    curve: ${5$$(yas-choose-value '("secp384r1" "secp521r1" "secp224r1" "secp192r1" "secp256r1" "secp256k1" "brainpoolP256r1" "brainpoolP384r1" "brainpoolP512r1" "sect571k1" "sect409k1" "sect283k1"
    force: ${6:False}                                                      # Should the key be regenerated even if it already exists 
    passphrase: ${7:value}                                                 # The passphrase for the private key 
    cipher: ${8:value}                                                     # The cipher to encrypt the private key  (Valid values can be found by running `openssl list -cipher-algorithms` or `opens
    select_crypto_backend: ${9$$(yas-choose-value '("auto" "cryptography" "pyopenssl"))}# choices: auto;cryptography;pyopenssl  Determines which crypto backend to use  The default choice is C(auto)
    backup: ${10:False}                                                    # Create a backup file including a timestamp so you can get the original private key back if you overwrote it with a new o
    mode: ${11:value}                                                      # The permissions the resulting file or directory should have  For those used to I(/usr/bin/chmod) remember that modes are
    owner: ${12:value}                                                     # Name of the user that should own the file/directory, as would be fed to I(chown) 
    group: ${13:value}                                                     # Name of the group that should own the file/directory, as would be fed to I(chown) 
    seuser: ${14:value}                                                    # The user part of the SELinux file context  By default it uses the C(system) policy, where applicable  When set to C(_def
    serole: ${15:value}                                                    # The role part of the SELinux file context  When set to C(_default), it will use the C(role) portion of the policy if ava
    setype: ${16:value}                                                    # The type part of the SELinux file context  When set to C(_default), it will use the C(type) portion of the policy if ava
    selevel: ${17:s0}                                                      # The level part of the SELinux file context  This is the MLS/MCS attribute, sometimes known as the C(range)  When set to 
    unsafe_writes: ${18:False}                                             # Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file  By default
    attributes: ${19:value}                                                # The attributes the resulting file or directory should have  To get supported flags look at the man page for I(chattr) on
