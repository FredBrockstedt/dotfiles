# -*- mode: snippet -*-
# name: maintain an ec2 VPC security group.
# prefix: ec2_group_snippet
# key: c2_group
# group: ansible
# --

- name: ${0:maintain an ec2 VPC security group.}
  ec2_group:                                                               
    name: ${1:value}                                                       # Name of the security group  One of and only one of I(name) or I(group_id) is required  Required if I(state=present) 
    group_id: ${2:value}                                                   # Id of group to delete (works only with absent)  One of and only one of I(name) or I(group_id) is required 
    description: ${3:value}                                                # Description of the security group  Required when C(state) is C(present) 
    vpc_id: ${4:value}                                                     # ID of the VPC to create the group in 
    rules: ${5:value}                                                      # List of firewall inbound rules to enforce in this group (see example)  If none are supplied, no inbound rules will be en
    rules_egress: ${6:value}                                               # List of firewall outbound rules to enforce in this group (see example)  If none are supplied, a default all-out rule is 
    state: ${7$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Create or delete a security group
    purge_rules: ${8:true}                                                 # Purge existing rules on security group that are not found in rules
    purge_rules_egress: ${9:true}                                          # Purge existing rules_egress on security group that are not found in rules_egress
    tags: ${10:value}                                                      # A dictionary of one or more tags to assign to the security group 
    purge_tags: ${11:True}                                                 # If yes, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter  If the I(t
    debug_botocore_endpoint_logs: ${12:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${13:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${14:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${15:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${16:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${17:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${18:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${19:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
