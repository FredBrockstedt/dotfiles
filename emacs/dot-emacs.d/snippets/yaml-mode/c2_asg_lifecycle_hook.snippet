# -*- mode: snippet -*-
# name: Create, delete or update AWS ASG Lifecycle Hooks.
# prefix: ec2_asg_lifecycle_hook_snippet
# key: c2_asg_lifecycle_hook
# group: ansible
# --

- name: ${0:Create, delete or update AWS ASG Lifecycle Hooks.}
  ec2_asg_lifecycle_hook:                                                  
    lifecycle_hook_name: ${1:The name of the lifecycle hook}               #
    autoscaling_group_name: ${2:The name of the Auto Scaling group to which you want to assign the lifecycle hook}#
    transition: ${3$$(yas-choose-value '("autoscaling:EC2_INSTANCE_TERMINATING" "autoscaling:EC2_INSTANCE_LAUNCHING"))}# The instance state to which you want to attach the lifecycle hook 
    state: ${4$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Create or delete Lifecycle Hook  Present updates existing one or creates if not found 
    role_arn: ${5:value}                                                   # The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target 
    notification_target_arn: ${6:value}                                    # The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state 
    notification_meta_data: ${7:value}                                     # Contains additional information that you want to include any time Auto Scaling sends a message to the notification targe
    heartbeat_timeout: ${8:"3600 (1 hour)"}                                # The amount of time, in seconds, that can elapse before the lifecycle hook times out  When the lifecycle hook times out, 
    default_result: ${9$$(yas-choose-value '("ABANDON" "CONTINUE"))}       # choices: ABANDON;CONTINUE  Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
    debug_botocore_endpoint_logs: ${10:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${11:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${12:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${13:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${14:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${15:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${16:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${17:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
