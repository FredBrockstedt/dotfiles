# -*- mode: snippet -*-
# name: Add/Delete rule from an existing security group
# prefix: os_security_group_rule_snippet
# key: os_security_group_ru
# group: ansible
# --

- name: ${0:Add/Delete rule from an existing security group}
  os_security_group_rule:                                                  
    security_group: ${1:Name or ID of the security group}                  #
    protocol: ${2$$(yas-choose-value '("tcp" "udp" "icmp" "112" "None"))}  # choices: tcp;udp;icmp;112;None  IP protocols TCP UDP ICMP 112 (VRRP)
    port_range_min: ${3:value}                                             # Starting port
    port_range_max: ${4:value}                                             # Ending port
    remote_ip_prefix: ${5:value}                                           # Source IP address(es) in CIDR notation (exclusive with remote_group)
    remote_group: ${6:value}                                               # Name or ID of the Security group to link (exclusive with remote_ip_prefix)
    ethertype: ${7$$(yas-choose-value '("IPv4" "IPv6"))}                   # choices: IPv4;IPv6  Must be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules  Not 
    direction: ${8$$(yas-choose-value '("egress" "ingress"))}              # choices: egress;ingress  The direction in which the security group rule is applied  Not all providers support egress 
    state: ${9$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Should the resource be present or absent 
    project: ${10:value}                                                   # Unique name or ID of the project 
    availability_zone: ${11:value}                                         # Ignored  Present for backwards compatibility
    cloud: ${12:value}                                                     # Named cloud or cloud config to operate against  If I(cloud) is a string, it references a named cloud config as defined i
    auth: ${13:value}                                                      # Dictionary containing auth information as needed by the cloud's auth plugin strategy  For the default I(password) plugin
    auth_type: ${14:value}                                                 # Name of the auth plugin to use  If the cloud uses something other than password authentication, the name of the plugin s
    region_name: ${15:value}                                               # Name of the region 
    wait: ${16:True}                                                       # Should ansible wait until the requested resource is complete 
    timeout: ${17:180}                                                     # How long should ansible wait for the requested resource 
    api_timeout: ${18:value}                                               # How long should the socket layer wait before timing out for API calls  If this is omitted, nothing will be passed to the
    validate_certs: ${19:False}                                            # Whether or not SSL API requests should be verified  Before Ansible 2 3 this defaulted to C(yes) 
    ca_cert: ${20:value}                                                   # A path to a CA Cert bundle that can be used as part of verifying SSL API requests 
    client_cert: ${21:value}                                               # A path to a client certificate to use as part of the SSL transaction 
    client_key: ${22:value}                                                # A path to a client key to use as part of the SSL transaction 
    interface: ${23$$(yas-choose-value '("admin" "internal" "public"))}    # choices: admin;internal;public  Endpoint URL type to fetch from the service catalog 
