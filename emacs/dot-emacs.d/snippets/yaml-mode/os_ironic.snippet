# -*- mode: snippet -*-
# name: Create/Delete Bare Metal Resources from OpenStack
# prefix: os_ironic_snippet
# key: os_ironic
# group: ansible
# --

- name: ${0:Create/Delete Bare Metal Resources from OpenStack}
  os_ironic:                                                               
    driver: ${1:The name of the Ironic Driver to use with this node}       #
    nics: ${2:A list of network interface cards, eg, " - mac: aa:bb:cc:aa:bb:cc"}#
    state: ${3$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Indicates desired state of the resource
    uuid: ${4:value}                                                       # globally unique identifier (UUID) to be given to the resource  Will be auto-generated if not specified, and name is spec
    name: ${5:value}                                                       # unique name identifier to be given to the resource 
    chassis_uuid: ${6:value}                                               # Associate the node with a pre-defined chassis 
    ironic_url: ${7:value}                                                 # If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API   Use with "auth" and "aut
    driver_info: ${8:value}                                                # Information for this server's driver  Will vary based on which driver is in use  Any sub-field which is populated will b
    properties: ${9:value}                                                 # Definition of the physical characteristics of this server, used for scheduling purposes
    skip_update_of_driver_password: ${10:false}                            # Allows the code that would assert changes to nodes to skip the update if the change is a single line consisting of the p
    availability_zone: ${11:value}                                         # Ignored  Present for backwards compatibility
    cloud: ${12:value}                                                     # Named cloud or cloud config to operate against  If I(cloud) is a string, it references a named cloud config as defined i
    auth: ${13:value}                                                      # Dictionary containing auth information as needed by the cloud's auth plugin strategy  For the default I(password) plugin
    auth_type: ${14:value}                                                 # Name of the auth plugin to use  If the cloud uses something other than password authentication, the name of the plugin s
    region_name: ${15:value}                                               # Name of the region 
    wait: ${16:True}                                                       # Should ansible wait until the requested resource is complete 
    timeout: ${17:180}                                                     # How long should ansible wait for the requested resource 
    api_timeout: ${18:value}                                               # How long should the socket layer wait before timing out for API calls  If this is omitted, nothing will be passed to the
    validate_certs: ${19:False}                                            # Whether or not SSL API requests should be verified  Before Ansible 2 3 this defaulted to C(yes) 
    ca_cert: ${20:value}                                                   # A path to a CA Cert bundle that can be used as part of verifying SSL API requests 
    client_cert: ${21:value}                                               # A path to a client certificate to use as part of the SSL transaction 
    client_key: ${22:value}                                                # A path to a client key to use as part of the SSL transaction 
    interface: ${23$$(yas-choose-value '("admin" "internal" "public"))}    # choices: admin;internal;public  Endpoint URL type to fetch from the service catalog 
