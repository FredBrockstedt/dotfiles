# -*- mode: snippet -*-
# name: Create or drop indexes from a PostgreSQL database
# prefix: postgresql_idx_snippet
# key: postgresql_idx
# group: ansible
# --

- name: ${0:Create or drop indexes from a PostgreSQL database}
  postgresql_idx:                                                          
    idxname: ${1:Name of the index to create or drop}                      #
    table: ${2:Table to create index on it}                                # Mutually exclusive with I(state=absent) 
    db: ${3:value}                                                         # Name of database to connect to and where the index will be created/dropped 
    session_role: ${4:value}                                               # Switch to session_role after connecting  The specified session_role must be a role that the current login_user is a memb
    schema: ${5:value}                                                     # Name of a database schema where the index will be created 
    state: ${6$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  Index state  I(state=present) implies the index will be created if it does not exist  I(state=a
    columns: ${7:value}                                                    # List of index columns that need to be covered by index  Mutually exclusive with I(state=absent) 
    cond: ${8:value}                                                       # Index conditions  Mutually exclusive with I(state=absent) 
    idxtype: ${9:value}                                                    # Index type (like btree, gist, gin, etc )  Mutually exclusive with I(state=absent) 
    concurrent: ${10:True}                                                 # Enable or disable concurrent mode (CREATE / DROP INDEX CONCURRENTLY)  Pay attention, if I(concurrent=no), the table will
    tablespace: ${11:value}                                                # Set a tablespace for the index  Mutually exclusive with I(state=absent) 
    storage_params: ${12:value}                                            # Storage parameters like fillfactor, vacuum_cleanup_index_scale_factor, etc  Mutually exclusive with I(state=absent) 
    cascade: ${13:False}                                                   # Automatically drop objects that depend on the index, and in turn all objects that depend on those objects  It used only 
    login_user: ${14:postgres}                                             # The username used to authenticate with 
    login_password: ${15:value}                                            # The password used to authenticate with 
    login_host: ${16:value}                                                # Host running the database 
    login_unix_socket: ${17:value}                                         # Path to a Unix domain socket for local connections 
    port: ${18:5432}                                                       # Database port to connect to 
    ssl_mode: ${19$$(yas-choose-value '("allow" "disable" "prefer" "require" "verify-ca" "verify-full"))}# choices: allow;disable;prefer;require;verify-ca;verify-full  Determines whether or with wh
    ca_cert: ${20:value}                                                   # Specifies the name of a file containing SSL certificate authority (CA) certificate(s)  If the file exists, the server's 
