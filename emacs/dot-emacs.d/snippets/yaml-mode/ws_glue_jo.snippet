# -*- mode: snippet -*-
# name: Manage an AWS Glue job
# prefix: aws_glue_job_snippet
# key: ws_glue_jo
# group: ansible
# --

- name: ${0:Manage an AWS Glue job}
  aws_glue_job:                                                            
    command_script_location: ${1:The S3 path to a script that executes a job}#
    name: ${2:The name you assign to this job definition}                  # It must be unique in your account 
    role: ${3:The name or ARN of the IAM role associated with this job}    #
    state: ${4$$(yas-choose-value '("present" "absent"))}                  # Create or delete the AWS Glue job 
    allocated_capacity: ${5:value}                                         # The number of AWS Glue data processing units (DPUs) to allocate to this Job  From 2 to 100 DPUs can be allocated; the de
    command_name: ${6:glueetl}                                             # The name of the job command  This must be 'glueetl' 
    connections: ${7:value}                                                # A list of Glue connections used for this job 
    default_arguments: ${8:value}                                          # A dict of default arguments for this job   You can specify arguments here that your own job-execution script consumes, a
    description: ${9:value}                                                # Description of the job being defined 
    max_concurrent_runs: ${10:value}                                       # The maximum number of concurrent runs allowed for the job  The default is 1  An error is returned when this threshold is
    max_retries: ${11:value}                                               # The maximum number of times to retry this job if it fails 
    timeout: ${12:value}                                                   # The job timeout in minutes 
    debug_botocore_endpoint_logs: ${13:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${14:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${15:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${16:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${17:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${18:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${19:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${20:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
