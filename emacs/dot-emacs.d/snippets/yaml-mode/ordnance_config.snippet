# -*- mode: snippet -*-
# name: Manage Ordnance configuration sections
# prefix: ordnance_config_snippet
# key: ordnance_config
# group: ansible
# --

- name: ${0:Manage Ordnance configuration sections}
  ordnance_config:                                                         
    lines: ${1:value}                                                      # The ordered set of commands that should be configured in the section   The commands must be the exact same commands as f
    parents: ${2:value}                                                    # The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against   If t
    src: ${3:value}                                                        # Specifies the source path to the file that contains the configuration or configuration template to load   The path to th
    before: ${4:value}                                                     # The ordered set of commands to push on to the command stack if a change needs to be made   This allows the playbook desi
    after: ${5:value}                                                      # The ordered set of commands to append to the end of the command stack if a change needs to be made   Just like with I(be
    match: ${6$$(yas-choose-value '("line" "strict" "exact" "none"))}      # choices: line;strict;exact;none  Instructs the module on the way to perform the matching of the set of commands against 
    replace: ${7$$(yas-choose-value '("line" "block"))}                    # choices: line;block  Instructs the module on the way to perform the configuration on the device   If the replace argumen
    multiline_delimiter: ${8:@}                                            # This argument is used when pushing a multiline configuration element to the Ordnance router   It specifies the character
    backup: ${9:false}                                                     # This argument will cause the module to create a full backup of the current C(running-config) from the remote device befo
    config: ${10:value}                                                    # The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuratio
    defaults: ${11:false}                                                  # This argument specifies whether or not to collect all defaults when getting the remote device running config   When enab
    save: ${12:false}                                                      # The C(save) argument instructs the module to save the running- config to the startup-config at the conclusion of the mod
