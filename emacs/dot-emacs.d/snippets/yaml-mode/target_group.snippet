# -*- mode: snippet -*-
# name: Manage a target group for an Application or Network load balancer
# prefix: elb_target_group_snippet
# key: target_group
# group: ansible
# --

- name: ${0:Manage a target group for an Application or Network load balancer}
  elb_target_group:                                                        
    name: ${1:The name of the target group}                                #
    state: ${2$$(yas-choose-value '("present" "absent"))}                  # Create or destroy the target group 
    deregistration_delay_timeout: ${3:value}                               # The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to 
    health_check_protocol: ${4$$(yas-choose-value '("http" "https" "tcp"))}# choices: http;https;tcp  The protocol the load balancer uses when performing health checks on targets 
    health_check_port: ${{5:"The port on which each target receives traffic from the load balancer}#"} # not required  The port the load balancer uses when performing health checks on targets  Can 
    health_check_path: ${6:value}                                          # The ping path that is the destination on the targets for health checks  The path must be defined in order to set a healt
    health_check_interval: ${7:value}                                      # The approximate amount of time, in seconds, between health checks of an individual target 
    health_check_timeout: ${8:value}                                       # The amount of time, in seconds, during which no response from a target means a failed health check 
    healthy_threshold_count: ${9:value}                                    # The number of consecutive health checks successes required before considering an unhealthy target healthy 
    modify_targets: ${10:True}                                             # Whether or not to alter existing targets in the group to match what is passed with the module
    port: ${11:value}                                                      # The port on which the targets receive traffic  This port is used unless you specify a port override when registering the
    protocol: ${12$$(yas-choose-value '("http" "https" "tcp"))}            # choices: http;https;tcp  The protocol to use for routing traffic to the targets  Required when I(state) is C(present) 
    purge_tags: ${13:True}                                                 # If yes, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter  If the tag
    stickiness_enabled: ${14:value}                                        # Indicates whether sticky sessions are enabled 
    stickiness_lb_cookie_duration: ${15:value}                             # The time period, in seconds, during which requests from a client should be routed to the same target  After this time pe
    stickiness_type: ${16:lb_cookie}                                       # The type of sticky sessions  The possible value is lb_cookie 
    successful_response_codes: ${17:value}                                 # The HTTP codes to use when checking for a successful response from a target  Accepts multiple values (for example, "200,
    tags: ${18:value}                                                      # A dictionary of one or more tags to assign to the target group 
    target_type: ${19$$(yas-choose-value '("instance" "ip" "lambda"))}     # choices: instance;ip;lambda  The type of target that you must specify when registering targets with this target group  T
    targets: ${20:value}                                                   # A list of targets to assign to the target group  This parameter defaults to an empty list  Unless you set the 'modify_ta
    unhealthy_threshold_count: ${21:value}                                 # The number of consecutive health check failures required before considering a target unhealthy 
    vpc_id: ${22:value}                                                    # The identifier of the virtual private cloud (VPC)  Required when I(state) is C(present) 
    wait: ${23:False}                                                      # Whether or not to wait for the target group 
    wait_timeout: ${24:200}                                                # The time to wait for the target group 
    debug_botocore_endpoint_logs: ${25:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${26:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${27:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${28:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${29:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${30:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${31:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${32:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
