# -*- mode: snippet -*-
# name: Manage an Application load balancer
# prefix: elb_application_lb_snippet
# key: pplicatio
# group: ansible
# --

- name: ${0:Manage an Application load balancer}
  elb_application_lb:                                                      
    name: ${1:The name of the load balancer}                               # This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric ch
    access_logs_enabled: ${2:value}                                        # Whether or not to enable access logs  When true, I(access_logs_s3_bucket) must be set 
    access_logs_s3_bucket: ${3:value}                                      # The name of the S3 bucket for the access logs  Required if access logs in Amazon S3 are enabled  The bucket must exist i
    access_logs_s3_prefix: ${4:value}                                      # The prefix for the log location in the S3 bucket  If you don't specify a prefix, the access logs are stored in the root 
    deletion_protection: ${5:False}                                        # Indicates whether deletion protection for the ELB is enabled 
    http2: ${6:False}                                                      # Indicates whether to enable HTTP2 routing 
    idle_timeout: ${7:60}                                                  # The number of seconds to wait before an idle connection is closed 
    listeners: ${8:value}                                                  # A list of dicts containing listeners to attach to the ELB  See examples for detail of the dict required  Note that liste
    purge_listeners: ${9:True}                                             # If yes, existing listeners will be purged from the ELB to match exactly what is defined by I(listeners) parameter  If th
    purge_tags: ${10:True}                                                 # If yes, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter  If the I(t
    subnets: ${11:value}                                                   # A list of the IDs of the subnets to attach to the load balancer  You can specify only one subnet per Availability Zone  
    security_groups: ${12:[]}                                              # A list of the names or IDs of the security groups to assign to the load balancer  Required if state=present 
    scheme: ${13$$(yas-choose-value '("internet-facing" "internal"))}      # choices: internet-facing;internal  Internet-facing or internal load balancer  An ELB scheme can not be modified after cr
    state: ${14$$(yas-choose-value '("present" "absent"))}                 # choices: present;absent  Create or destroy the load balancer 
    tags: ${15:value}                                                      # A dictionary of one or more tags to assign to the load balancer 
    wait: ${16:False}                                                      # Wait for the load balancer to have a state of 'active' before completing  A status check is performed every 15 seconds u
    wait_timeout: ${17:value}                                              # The time in seconds to use in conjunction with I(wait) 
    purge_rules: ${18:True}                                                # When set to no, keep the existing load balancer rules in place  Will modify and add, but will not delete 
    debug_botocore_endpoint_logs: ${19:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${20:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${21:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${22:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${23:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${24:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${25:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${26:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
