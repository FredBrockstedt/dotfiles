# -*- mode: snippet -*-
# name: Module for setup of PoolGroup Avi RESTful Object
# prefix: avi_poolgroup_snippet
# key: vi_poolgroup
# group: ansible
# --

- name: ${0:Module for setup of PoolGroup Avi RESTful Object}
  avi_poolgroup:                                                           
    name: ${1:The name of the pool group}                                  #
    state: ${2$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  The state that should be applied on the entity 
    avi_api_update_method: ${3$$(yas-choose-value '("put" "patch"))}       # choices: put;patch  Default method for object update is HTTP PUT  Setting to patch will override that behavior to use HT
    avi_api_patch_op: ${4$$(yas-choose-value '("add" "replace" "delete"))} # choices: add;replace;delete  Patch operation to use when using avi_api_update_method as patch 
    cloud_config_cksum: ${5:value}                                         # Checksum of cloud configuration for poolgroup  Internally set by cloud connector 
    cloud_ref: ${6:value}                                                  # It is a reference to an object of type cloud 
    created_by: ${7:value}                                                 # Name of the user who created the object 
    deployment_policy_ref: ${8:value}                                      # When setup autoscale manager will automatically promote new pools into production when deployment goals are met  It is a
    description: ${9:value}                                                # Description of pool group 
    fail_action: ${10:value}                                               # Enable an action - close connection, http redirect, or local http response - when a pool group failure happens  By defau
    implicit_priority_labels: ${11:value}                                  # Whether an implicit set of priority labels is generated  Field introduced in 17 1 9,17 2 3  Default value when not speci
    members: ${12:value}                                                   # List of pool group members object of type poolgroupmember 
    min_servers: ${13:value}                                               # The minimum number of servers to distribute traffic to  Allowed values are 1-65535  Special values are 0 - 'disable'  De
    priority_labels_ref: ${14:value}                                       # Uuid of the priority labels  If not provided, pool group member priority label will be interpreted as a number with a la
    service_metadata: ${15:value}                                          # Metadata pertaining to the service provided by this poolgroup  In openshift/kubernetes environments, app metadata info i
    tenant_ref: ${16:value}                                                # It is a reference to an object of type tenant 
    url: ${17:value}                                                       # Avi controller URL of the object 
    uuid: ${18:value}                                                      # Uuid of the pool group 
    controller: ${19:}                                                     # IP address or hostname of the controller  The default value is the environment variable C(AVI_CONTROLLER) 
    username: ${20:}                                                       # Username used for accessing Avi controller  The default value is the environment variable C(AVI_USERNAME) 
    password: ${21:}                                                       # Password of Avi user in Avi controller  The default value is the environment variable C(AVI_PASSWORD) 
    tenant: ${22:admin}                                                    # Name of tenant used for all Avi API calls and context of object 
    tenant_uuid: ${23:}                                                    # UUID of tenant used for all Avi API calls and context of object 
    api_version: ${{24:16}                                                 #4 4} # not required  Avi API version of to use for Avi API and objects 
    avi_credentials: ${25:value}                                           # Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details 
    api_context: ${26:value}                                               # Avi API context that includes current session ID and CSRF Token  This allows user to perform single login and re-use the
    avi_disable_session_cache_as_fact: ${27:value}                         # It disables avi session information to be cached as a fact 
