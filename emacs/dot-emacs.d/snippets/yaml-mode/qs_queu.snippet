# -*- mode: snippet -*-
# name: Creates or deletes AWS SQS queues.
# prefix: sqs_queue_snippet
# key: qs_queu
# group: ansible
# --

- name: ${0:Creates or deletes AWS SQS queues.}
  sqs_queue:                                                               
    name: ${1:Name of the queue}                                           #
    state: ${2$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Create or delete the queue
    default_visibility_timeout: ${3:value}                                 # The default visibility timeout in seconds 
    message_retention_period: ${4:value}                                   # The message retention period in seconds 
    maximum_message_size: ${5:value}                                       # The maximum message size in bytes 
    delivery_delay: ${6:value}                                             # The delivery delay in seconds 
    receive_message_wait_time: ${7:value}                                  # The receive message wait time in seconds 
    policy: ${8:value}                                                     # The json dict policy to attach to queue
    redrive_policy: ${9:value}                                             # json dict with the redrive_policy (see example)
    debug_botocore_endpoint_logs: ${10:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${11:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${12:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${13:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${14:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${15:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${16:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${17:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
