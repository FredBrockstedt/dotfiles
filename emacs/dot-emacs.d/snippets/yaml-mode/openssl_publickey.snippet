# -*- mode: snippet -*-
# name: Generate an OpenSSL public key from its private key.
# prefix: openssl_publickey_snippet
# key: openssl_publickey
# group: ansible
# --

- name: ${0:Generate an OpenSSL public key from its private key.}
  openssl_publickey:                                                       
    path: ${1:Name of the file in which the generated TLS/SSL public key will be written}#
    state: ${2$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  Whether the public key should exist or not, taking action if the state is different from what i
    force: ${3:False}                                                      # Should the key be regenerated even it it already exists 
    format: ${4$$(yas-choose-value '("OpenSSH" "PEM"))}                    # choices: OpenSSH;PEM  The format of the public key 
    privatekey_path: ${5:value}                                            # Path to the TLS/SSL private key from which to generate the public key  Required if I(state) is C(present) 
    privatekey_passphrase: ${6:value}                                      # The passphrase for the private key 
    backup: ${7:False}                                                     # Create a backup file including a timestamp so you can get the original public key back if you overwrote it with a differ
    select_crypto_backend: ${8$$(yas-choose-value '("auto" "cryptography" "pyopenssl"))}# choices: auto;cryptography;pyopenssl  Determines which crypto backend to use  The default choice is C(auto)
    mode: ${9:value}                                                       # The permissions the resulting file or directory should have  For those used to I(/usr/bin/chmod) remember that modes are
    owner: ${10:value}                                                     # Name of the user that should own the file/directory, as would be fed to I(chown) 
    group: ${11:value}                                                     # Name of the group that should own the file/directory, as would be fed to I(chown) 
    seuser: ${12:value}                                                    # The user part of the SELinux file context  By default it uses the C(system) policy, where applicable  When set to C(_def
    serole: ${13:value}                                                    # The role part of the SELinux file context  When set to C(_default), it will use the C(role) portion of the policy if ava
    setype: ${14:value}                                                    # The type part of the SELinux file context  When set to C(_default), it will use the C(type) portion of the policy if ava
    selevel: ${15:s0}                                                      # The level part of the SELinux file context  This is the MLS/MCS attribute, sometimes known as the C(range)  When set to 
    unsafe_writes: ${16:False}                                             # Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file  By default
    attributes: ${17:value}                                                # The attributes the resulting file or directory should have  To get supported flags look at the man page for I(chattr) on
