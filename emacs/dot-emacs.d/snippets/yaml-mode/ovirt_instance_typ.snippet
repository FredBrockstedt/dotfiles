# -*- mode: snippet -*-
# name: Module to manage Instance Types in oVirt/RHV
# prefix: ovirt_instance_type_snippet
# key: ovirt_instance_typ
# group: ansible
# --

- name: ${0:Module to manage Instance Types in oVirt/RHV}
  ovirt_instance_type:                                                     
    auth: ${1:Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}#
    name: ${2:value}                                                       # Name of the Instance Type to manage  If instance type don't exists C(name) is required  Otherwise C(id) or C(name) can b
    id: ${3:value}                                                         # ID of the Instance Type to manage 
    state: ${4$$(yas-choose-value '("absent" "present"))}                  # choices: absent;present  Should the Instance Type be present/absent  I(present) state will create/update instance type a
    memory: ${5:value}                                                     # Amount of memory of the Instance Type  Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB)  Default value is se
    memory_guaranteed: ${6:value}                                          # Amount of minimal guaranteed memory of the Instance Type  Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB)  
    nics: ${7:value}                                                       # List of NICs, which should be attached to Virtual Machine  NIC is described by following dictionary  C(name) - Name of t
    memory_max: ${8:value}                                                 # Upper bound of instance type memory up to which memory hot-plug can be performed  Prefix uses IEC 60027-2 standard (for 
    cpu_cores: ${9:value}                                                  # Number of virtual CPUs cores of the Instance Type  Default value is set by oVirt/RHV engine 
    cpu_sockets: ${10:value}                                               # Number of virtual CPUs sockets of the Instance Type  Default value is set by oVirt/RHV engine 
    cpu_threads: ${11:value}                                               # Number of virtual CPUs sockets of the Instance Type  Default value is set by oVirt/RHV engine 
    operating_system: ${12:value}                                          # Operating system of the Instance Type  Default value is set by oVirt/RHV engine  Possible values: debian_7, freebsd, fre
    boot_devices: ${13$$(yas-choose-value '("cdrom" "hd" "network"))}      # choices: cdrom;hd;network  List of boot devices which should be used to boot  For example C([ cdrom, hd ])  Default valu
    serial_console: ${14:value}                                            # I(True) enable VirtIO serial console, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    usb_support: ${15:value}                                               # I(True) enable USB support, I(False) to disable it  By default is chosen by oVirt/RHV engine 
    high_availability: ${16:value}                                         # If I(yes) Instance Type will be set as highly available  If I(no) Instance Type won't be set as highly available  If no 
    high_availability_priority: ${17:value}                                # Indicates the priority of the instance type inside the run and migration queues  Instance Type with higher priorities wi
    watchdog: ${18:value}                                                  # Assign watchdog device for the instance type  Watchdogs is a dictionary which can have following values: C(model) - Mode
    host: ${19:value}                                                      # Specify host where Instance Type should be running  By default the host is chosen by engine scheduler  This parameter is
    graphical_console: ${20:value}                                         # Assign graphical console to the instance type  Graphical console is a dictionary which can have following values: C(head
    description: ${21:value}                                               # Description of the instance type 
    cpu_mode: ${22:value}                                                  # CPU mode of the instance type  It can be some of the following: I(host_passthrough), I(host_model) or I(custom)  For I(h
    rng_device: ${23:value}                                                # Random number generator (RNG)  You can choose of one the following devices I(urandom), I(random) or I(hwrng)  In order t
    rng_bytes: ${24:value}                                                 # Number of bytes allowed to consume per period 
    rng_period: ${25:value}                                                # Duration of one period in milliseconds 
    placement_policy: ${26:value}                                          # The configuration of the instance type's placement policy  Placement policy can be one of the following values: C(migrat
    cpu_pinning: ${27:value}                                               # CPU Pinning topology to map instance type CPU to host CPU  CPU Pinning topology is a list of dictionary which can have f
    soundcard_enabled: ${28:value}                                         # If I(true), the sound card is added to the instance type 
    smartcard_enabled: ${29:value}                                         # If I(true), use smart card authentication 
    virtio_scsi: ${30:value}                                               # If I(true), virtio scsi will be enabled 
    io_threads: ${31:value}                                                # Number of IO threads used by instance type  I(0) means IO threading disabled 
    ballooning_enabled: ${32:value}                                        # If I(true), use memory ballooning  Memory balloon is a guest device, which may be used to re-distribute / reclaim the ho
    wait: ${33:True}                                                       # C(yes) if the module should wait for the entity to get into desired state 
    fetch_nested: ${34:value}                                              # If I(True) the module will fetch additional data from the API  It will fetch IDs of the VMs disks, snapshots, etc  User 
    nested_attributes: ${35:value}                                         # Specifies list of the attributes which should be fetched from the API  This parameter apply only when C(fetch_nested) is
    timeout: ${36:180}                                                     # The amount of time in seconds the module should wait for the instance to get into desired state 
    poll_interval: ${37:3}                                                 # Number of the seconds the module waits until another poll request on entity status is sent 
