# -*- mode: snippet -*-
# name: Creates, updates or deletes AWS Lambda function event mappings.
# prefix: lambda_event_snippet
# key: mbda_event
# group: ansible
# --

- name: ${0:Creates, updates or deletes AWS Lambda function event mappings.}
  lambda_event:                                                            
    lambda_function_arn: ${1:The name or ARN of the lambda function}       #
    state: ${2$$(yas-choose-value '("present" "absent"))}                  # Describes the desired state 
    alias: ${3:Name of the function alias}                                 # Mutually exclusive with C(version) 
    source_params: ${4:Sub-parameters required for event source}           # I(== stream event source ==) C(source_arn) The Amazon Resource Name (ARN) of the Kinesis or DynamoDB stream that is the 
    version: ${5:value}                                                    # Version of the Lambda function  Mutually exclusive with C(alias) 
    event_source: ${6$$(yas-choose-value '("stream" "sqs"))}               # choices: stream;sqs  Source of the event that triggers the lambda function  For DynamoDB and Kinesis events, select 'str
    debug_botocore_endpoint_logs: ${7:false}                               # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${8:value}                                                    # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${9:value}                                             # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${10:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${11:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${12:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${13:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${14:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
