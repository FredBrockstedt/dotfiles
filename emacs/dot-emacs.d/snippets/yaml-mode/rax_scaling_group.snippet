# -*- mode: snippet -*-
# name: Manipulate Rackspace Cloud Autoscale Groups
# prefix: rax_scaling_group_snippet
# key: rax_scaling_group
# group: ansible
# --

- name: ${0:Manipulate Rackspace Cloud Autoscale Groups}
  rax_scaling_group:                                                       
    flavor: ${1:flavor to use for the instance}                            #
    image: ${2:image to use for the instance}                              # Can be an C(id), C(human_id) or C(name)
    max_entities: ${3:The maximum number of entities that are allowed in the scaling group}# Must be an integer between 0 and 1000 
    min_entities: ${4:The minimum number of entities that are allowed in the scaling group}# Must be an integer between 0 and 1000 
    name: ${5:Name to give the scaling group}                              #
    server_name: ${6:The base name for servers created by Autoscale}       #
    config_drive: ${7:false}                                               # Attach read-only configuration drive to server as label config-2
    cooldown: ${8:value}                                                   # The period of time, in seconds, that must pass before any scaling can occur after the previous scaling  Must be an integ
    disk_config: ${9$$(yas-choose-value '("auto" "manual"))}               # choices: auto;manual  Disk partitioning strategy
    files: ${10:value}                                                     # Files to insert into the instance  Hash of C(remotepath: localpath)
    key_name: ${11:value}                                                  # key pair to use on the instance
    loadbalancers: ${12:value}                                             # List of load balancer C(id) and C(port) hashes
    meta: ${13:value}                                                      # A hash of metadata to associate with the instance
    networks: ${14:"['public', 'private']"}                                # The network to attach to the instances  If specified, you must include ALL networks including the public and private int
    state: ${15$$(yas-choose-value '("present" "absent"))}                 # choices: present;absent  Indicate desired state of the resource
    user_data: ${16:value}                                                 # Data to be uploaded to the servers config drive  This option implies I(config_drive)  Can be a file path or a string
    wait: ${17:false}                                                      # wait for the scaling group to finish provisioning the minimum amount of servers
    wait_timeout: ${18:300}                                                # how long before wait gives up, in seconds
    api_key: ${19:value}                                                   # Rackspace API key, overrides I(credentials) 
    credentials: ${20:value}                                               # File to find the Rackspace credentials in  Ignored if I(api_key) and I(username) are provided 
    env: ${21:value}                                                       # Environment as configured in I(~/ pyrax cfg), see U(https://github com/rackspace/pyrax/blob/master/docs/getting_started 
    region: ${22:DFW}                                                      # Region to create an instance in 
    username: ${23:value}                                                  # Rackspace username, overrides I(credentials) 
    validate_certs: ${24:value}                                            # Whether or not to require SSL validation of API endpoints 
    auth_endpoint: ${{25:https://identity}                                 #api rackspacecloud com/v2 0/} # not required  The URI of the authentication service 
    identity_type: ${26:rackspace}                                         # Authentication mechanism to use, such as rackspace or keystone 
    tenant_id: ${27:value}                                                 # The tenant ID used for authentication 
    tenant_name: ${28:value}                                               # The tenant name used for authentication 
