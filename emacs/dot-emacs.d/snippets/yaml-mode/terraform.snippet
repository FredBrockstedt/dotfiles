# -*- mode: snippet -*-
# name: Manages a Terraform deployment (and plans)
# prefix: terraform_snippet
# key: terraform
# group: ansible
# --

- name: ${0:Manages a Terraform deployment (and plans)}
  terraform:                                                               
    project_path: ${1:The path to the root of the Terraform directory with the vars}#tf/main tf/etc to use 
    state: ${2$$(yas-choose-value '("planned" "present" "absent"))}        # choices: planned;present;absent  Goal state of given stage/project
    binary_path: ${3:value}                                                # The path of a terraform binary to use, relative to the 'service_path' unless you supply an absolute path 
    workspace: ${4:default}                                                # The terraform workspace to work with 
    purge_workspace: ${5:False}                                            # Only works with state = absent If true, the workspace will be deleted after the "terraform destroy" action  The 'default
    plan_file: ${6:value}                                                  # The path to an existing Terraform plan file to apply  If this is not specified, Ansible will build a new TF plan and exe
    state_file: ${7:value}                                                 # The path to an existing Terraform state file to use when building plan  If this is not specified, the default `terraform
    variables_file: ${8:value}                                             # The path to a variables file for Terraform to fill into the TF configurations 
    variables: ${9:value}                                                  # A group of key-values to override template variables or those in variables files 
    targets: ${10:value}                                                   # A list of specific resources to target in this plan/application  The resources selected here will also auto-include any 
    lock: ${11:value}                                                      # Enable statefile locking, if you use a service that accepts locks (such as S3+DynamoDB) to store your statefile 
    lock_timeout: ${12:value}                                              # How long to maintain the lock on the statefile, if you use a service that accepts locks (such as S3+DynamoDB) 
    force_init: ${13:False}                                                # To avoid duplicating infra, if a state file can't be found this will force a `terraform init`  Generally, this should be
    backend_config: ${14:value}                                            # A group of key-values to provide at init stage to the -backend-config parameter 
