# -*- mode: snippet -*-
# name: Deploys a VMware virtual machine from an OVF or OVA file
# prefix: vmware_deploy_ovf_snippet
# key: vmware_deploy_ovf
# group: ansible
# --

- name: ${0:Deploys a VMware virtual machine from an OVF or OVA file}
  vmware_deploy_ovf:                                                       
    allow_duplicates: ${1:true}                                            # Whether or not to allow duplicate VM names  ESXi allows duplicates, vCenter may not 
    datacenter: ${2:ha-datacenter}                                         # Datacenter to deploy to 
    cluster: ${3:value}                                                    # Cluster to deploy to 
    datastore: ${4:datastore1}                                             # Datastore to deploy to  You can also specify datastore storage cluster  version_added: 2 9
    deployment_option: ${5:value}                                          # The key of the chosen deployment option 
    disk_provisioning: ${6$$(yas-choose-value '("flat" "eagerZeroedThick" "monolithicSparse" "twoGbMaxExtentSparse" "twoGbMaxExtentFlat" "thin" "sparse" "thick" "seSparse" "monolithicFlat"))}# choi
    fail_on_spec_warnings: ${7:false}                                      # Cause the module to treat OVF Import Spec warnings as errors 
    folder: ${8:value}                                                     # Absolute path of folder to place the virtual machine  If not specified, defaults to the value of C(datacenter vmFolder) 
    inject_ovf_env: ${9:value}                                             # Force the given properties to be inserted into an OVF Environment and injected through VMware Tools 
    name: ${10:value}                                                      # Name of the VM to work with  Virtual machine names in vCenter are not necessarily unique, which may be problematic 
    networks: ${11:"namespace(VM Network='VM Network')"}                   # C(key: value) mapping of OVF network name, to the vCenter network name 
    ovf: ${12:value}                                                       # Path to OVF or OVA file to deploy 
    power_on: ${13:True}                                                   # Whether or not to power on the virtual machine after creation 
    properties: ${14:value}                                                # The assignment of values to the properties found in the OVF as key value pairs 
    resource_pool: ${15:Resources}                                         # Resource Pool to deploy to 
    wait: ${16:True}                                                       # Wait for the host to power on 
    wait_for_ip_address: ${17:False}                                       # Wait until vCenter detects an IP address for the VM  This requires vmware-tools (vmtoolsd) to properly work after creati
    hostname: ${18:value}                                                  # The hostname or IP address of the vSphere vCenter or ESXi server  If the value is not specified in the task, the value o
    username: ${19:value}                                                  # The username of the vSphere vCenter or ESXi server  If the value is not specified in the task, the value of environment 
    password: ${20:value}                                                  # The password of the vSphere vCenter or ESXi server  If the value is not specified in the task, the value of environment 
    validate_certs: ${21:True}                                             # Allows connection when SSL certificates are not valid  Set to C(false) when certificates are not trusted  If the value i
    port: ${22:443}                                                        # The port number of the vSphere vCenter or ESXi server  If the value is not specified in the task, the value of environme
    proxy_host: ${23:value}                                                # Address of a proxy that will receive all HTTPS requests and relay them  The format is a hostname or a IP  If the value i
    proxy_port: ${24:value}                                                # Port of the HTTP proxy that will receive all HTTPS requests and relay them  If the value is not specified in the task, t
