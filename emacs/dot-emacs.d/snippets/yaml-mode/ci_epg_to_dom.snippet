# -*- mode: snippet -*-
# name: Bind EPGs to Domains (fv:RsDomAtt)
# prefix: aci_epg_to_domain_snippet
# key: ci_epg_to_dom
# group: ansible
# --

- name: ${0:Bind EPGs to Domains (fv:RsDomAtt)}
  aci_epg_to_domain:                                                       
    host: ${1:IP Address or hostname of APIC resolvable by Ansible control host}#
    password: ${2:The password to use for authentication}                  # This option is mutual exclusive with C(private_key)  If C(private_key) is provided too, it will be used instead 
    private_key: ${3:Either a PEM-formatted private key file or the private key content used for signature-based authentication}# This value also influences the default C(certificate_name) that is 
    allow_useg: ${4$$(yas-choose-value '("encap" "useg"))}                 # choices: encap;useg  Allows micro-segmentation  The APIC defaults to C(encap) when unset during creation 
    ap: ${5:value}                                                         # Name of an existing application network profile, that will contain the EPGs 
    deploy_immediacy: ${6$$(yas-choose-value '("immediate" "lazy"))}       # choices: immediate;lazy  Determines when the policy is pushed to hardware Policy CAM  The APIC defaults to C(lazy) when 
    domain: ${7:value}                                                     # Name of the physical or virtual domain being associated with the EPG 
    domain_type: ${8$$(yas-choose-value '("l2dom" "phys" "vmm"))}          # choices: l2dom;phys;vmm  Specify whether the Domain is a physical (phys), a virtual (vmm) or an L2 external domain assoc
    encap: ${9:value}                                                      # The VLAN encapsulation for the EPG when binding a VMM Domain with static C(encap_mode)  This acts as the secondary encap
    encap_mode: ${10$$(yas-choose-value '("auto" "vlan" "vxlan"))}         # choices: auto;vlan;vxlan  The encapsulation method to be used  The APIC defaults to C(auto) when unset during creation  
    switching_mode: ${11$$(yas-choose-value '("AVE" "native"))}            # choices: AVE;native  Switching Mode used by the switch
    epg: ${12:value}                                                       # Name of the end point group 
    netflow: ${13:value}                                                   # Determines if netflow should be enabled  The APIC defaults to C(no) when unset during creation 
    primary_encap: ${14:value}                                             # Determines the primary VLAN ID when using useg  Accepted values range between C(1) and C(4096) 
    resolution_immediacy: ${15$$(yas-choose-value '("immediate" "lazy" "pre-provision"))}# choices: immediate;lazy;pre-provision  Determines when the policies should be resolved and available  The 
    state: ${16$$(yas-choose-value '("absent" "present" "query"))}         # choices: absent;present;query  Use C(present) or C(absent) for adding or removing  Use C(query) for listing an object or
    tenant: ${17:value}                                                    # Name of an existing tenant 
    vm_provider: ${18$$(yas-choose-value '("cloudfoundry" "kubernetes" "microsoft" "openshift" "openstack" "redhat" "vmware"))}# choices: cloudfoundry;kubernetes;microsoft;openshift;openstack;redha
    port: ${19:value}                                                      # Port number to be used for REST connection  The default value depends on parameter C(use_ssl) 
    username: ${20:admin}                                                  # The username to use for authentication 
    certificate_name: ${21:value}                                          # The X 509 certificate name attached to the APIC AAA user used for signature-based authentication  If a C(private_key) fi
    output_level: ${22$$(yas-choose-value '("debug" "info" "normal"))}     # choices: debug;info;normal  Influence the output of this ACI module  C(normal) means the standard output, incl  C(curren
    timeout: ${23:30}                                                      # The socket level timeout in seconds 
    use_proxy: ${24:True}                                                  # If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts 
    use_ssl: ${25:True}                                                    # If C(no), an HTTP connection will be used instead of the default HTTPS connection 
    validate_certs: ${26:True}                                             # If C(no), SSL certificates will not be validated  This should only set to C(no) when used on personally controlled sites
