# -*- mode: snippet -*-
# name: obtain information about one or more RDS snapshots
# prefix: rds_snapshot_info_snippet
# key: rds_snapshot_info
# group: ansible
# --

- name: ${0:obtain information about one or more RDS snapshots}
  rds_snapshot_info:                                                       
    db_snapshot_identifier: ${1:value}                                     # Name of an RDS (unclustered) snapshot  Mutually exclusive with I(db_instance_identifier), I(db_cluster_identifier), I(db
    db_instance_identifier: ${2:value}                                     # RDS instance name for which to find snapshots  Mutually exclusive with I(db_snapshot_identifier), I(db_cluster_identifie
    db_cluster_identifier: ${3:value}                                      # RDS cluster name for which to find snapshots  Mutually exclusive with I(db_snapshot_identifier), I(db_instance_identifie
    db_cluster_snapshot_identifier: ${4:value}                             # Name of an RDS cluster snapshot  Mutually exclusive with I(db_instance_identifier), I(db_snapshot_identifier), I(db_clus
    snapshot_type: ${5$$(yas-choose-value '("automated" "manual" "shared" "public"))}# choices: automated;manual;shared;public  Type of snapshot to find  By default both automated and manual snapsh
    debug_botocore_endpoint_logs: ${6:false}                               # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${7:value}                                                    # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${8:value}                                             # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${9:value}                                             # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${10:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${11:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${12:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${13:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
