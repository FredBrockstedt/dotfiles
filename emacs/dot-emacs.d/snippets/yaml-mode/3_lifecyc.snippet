# -*- mode: snippet -*-
# name: Manage s3 bucket lifecycle rules in AWS
# prefix: s3_lifecycle_snippet
# key: 3_lifecyc
# group: ansible
# --

- name: ${0:Manage s3 bucket lifecycle rules in AWS}
  s3_lifecycle:                                                            
    name: ${1:Name of the s3 bucket}                                       #
    expiration_date: ${2:value}                                            # Indicates the lifetime of the objects that are subject to the rule by the date they will expire  The value must be ISO-8
    expiration_days: ${3:value}                                            # Indicates the lifetime, in days, of the objects that are subject to the rule  The value must be a non-zero positive inte
    prefix: ${4:value}                                                     # Prefix identifying one or more objects to which the rule applies   If no prefix is specified, the rule will apply to the
    purge_transitions: ${5:True}                                           # "Whether to replace all the current transition(s) with the new transition(s)  When false, the provided transition(s) wil
    noncurrent_version_expiration_days: ${6:value}                         # Delete noncurrent versions this many days after they become noncurrent
    noncurrent_version_storage_class: ${7$$(yas-choose-value '("glacier" "onezone_ia" "standard_ia"))}# choices: glacier;onezone_ia;standard_ia  Transition noncurrent versions to this storage class
    noncurrent_version_transition_days: ${8:value}                         # Transition noncurrent versions this many days after they become noncurrent
    noncurrent_version_transitions: ${9:value}                             # A list of transition behaviors to be applied to noncurrent versions for the rule  Each storage class may be used only on
    rule_id: ${10:value}                                                   # Unique identifier for the rule  The value cannot be longer than 255 characters  A unique value for the rule will be gene
    state: ${11$$(yas-choose-value '("present" "absent"))}                 # choices: present;absent  Create or remove the lifecycle rule
    status: ${12$$(yas-choose-value '("enabled" "disabled"))}              # choices: enabled;disabled  If 'enabled', the rule is currently being applied  If 'disabled', the rule is not currently b
    storage_class: ${13$$(yas-choose-value '("glacier" "onezone_ia" "standard_ia"))}# choices: glacier;onezone_ia;standard_ia  The storage class to transition to  Currently there are two supported 
    transition_date: ${14:value}                                           # Indicates the lifetime of the objects that are subject to the rule by the date they will transition to a different stora
    transition_days: ${15:value}                                           # Indicates when, in days, an object transitions to a different storage class  If transition_date is not specified, this p
    transitions: ${16:value}                                               # A list of transition behaviors to be applied to the rule  Each storage class may be used only once  Each transition beha
    debug_botocore_endpoint_logs: ${17:false}                              # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${18:value}                                                   # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${19:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${20:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${21:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${22:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${23:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${24:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
