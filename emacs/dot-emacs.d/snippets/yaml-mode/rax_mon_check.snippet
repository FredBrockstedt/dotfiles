# -*- mode: snippet -*-
# name: Create or delete a Rackspace Cloud Monitoring check for an existing entity.
# prefix: rax_mon_check_snippet
# key: rax_mon_check
# group: ansible
# --

- name: ${0:Create or delete a Rackspace Cloud Monitoring check for an existing entity.}
  rax_mon_check:                                                           
    entity_id: ${1:ID of the rax_mon_entity to target with this check}     #
    label: ${2:Defines a label for this check, between 1 and 64 characters long}#
    check_type: ${{3$$(yas-choose-value '("remote}                         #dns,remote ftp-banner,remote http,remote imap-banner,remote mssql-banner,remote mysql-banner,remote ping,remote pop3-bann
    state: ${4$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Ensure that a check with this C(label) exists or does not exist 
    monitoring_zones_poll: ${5:value}                                      # Comma-separated list of the names of the monitoring zones the check should run from  Available monitoring zones include 
    target_hostname: ${6:value}                                            # One of `target_hostname` and `target_alias` is required for remote * checks, but prohibited for agent * checks  The host
    target_alias: ${7:value}                                               # One of `target_alias` and `target_hostname` is required for remote * checks, but prohibited for agent * checks  Use the 
    details: ${8:value}                                                    # Additional details specific to the check type  Must be a hash of strings between 1 and 255 characters long, or an array 
    disabled: ${9:value}                                                   # If "yes", ensure the check is created, but don't actually use it yet 
    metadata: ${10:value}                                                  # Hash of arbitrary key-value pairs to accompany this check if it fires  Keys and values must be strings between 1 and 255
    period: ${11:value}                                                    # The number of seconds between each time the check is performed  Must be greater than the minimum period set on your acco
    timeout: ${12:value}                                                   # The number of seconds this check will wait when attempting to collect results  Must be less than the period 
    api_key: ${13:value}                                                   # Rackspace API key, overrides I(credentials) 
    auth_endpoint: ${{14:https://identity}                                 #api rackspacecloud com/v2 0/} # not required  The URI of the authentication service 
    credentials: ${15:value}                                               # File to find the Rackspace credentials in  Ignored if I(api_key) and I(username) are provided 
    env: ${16:value}                                                       # Environment as configured in I(~/ pyrax cfg), see U(https://github com/rackspace/pyrax/blob/master/docs/getting_started 
    identity_type: ${17:rackspace}                                         # Authentication mechanism to use, such as rackspace or keystone 
    region: ${18:DFW}                                                      # Region to create an instance in 
    tenant_id: ${19:value}                                                 # The tenant ID used for authentication 
    tenant_name: ${20:value}                                               # The tenant name used for authentication 
    username: ${21:value}                                                  # Rackspace username, overrides I(credentials) 
    validate_certs: ${22:value}                                            # Whether or not to require SSL validation of API endpoints 
