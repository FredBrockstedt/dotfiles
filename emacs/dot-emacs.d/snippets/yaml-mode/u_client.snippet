# -*- mode: snippet -*-
# name: Manages Sensu client configuration
# prefix: sensu_client_snippet
# key: u_client
# group: ansible
# --

- name: ${0:Manages Sensu client configuration}
  sensu_client:                                                            
    subscriptions: ${1:An array of client subscriptions, a list of roles and/or responsibilities assigned to the system (e}#g  webserver)  These subscriptions determine which monitoring checks are 
    state: ${2$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Whether the client should be present or not
    name: ${{3:"System hostname as determined by Ruby Socket}              #gethostname (provided by Sensu)"} # not required  A unique name for the client  The name cannot contain special character
    address: ${{4:"Non-loopback IPv4 address as determined by Ruby Socket} #ip_address_list (provided by Sensu)"} # not required  An address to help identify and reach the client  This is only info
    safe_mode: ${5:false}                                                  # If safe mode is enabled for the client  Safe mode requires local check definitions in order to accept a check request an
    redact: ${6:value}                                                     # Client definition attributes to redact (values) when logging and sending client keepalives 
    socket: ${7:value}                                                     # The socket definition scope, used to configure the Sensu client socket 
    keepalives: ${8:true}                                                  # If Sensu should monitor keepalives for this client 
    keepalive: ${9:value}                                                  # The keepalive definition scope, used to configure Sensu client keepalives behavior (e g  keepalive thresholds, etc) 
    registration: ${10:value}                                              # The registration definition scope, used to configure Sensu registration event handlers 
    deregister: ${11:false}                                                # If a deregistration event should be created upon Sensu client process stop 
    deregistration: ${12:value}                                            # The deregistration definition scope, used to configure automated Sensu client de-registration 
    ec2: ${13:value}                                                       # The ec2 definition scope, used to configure the Sensu Enterprise AWS EC2 integration (Sensu Enterprise users only) 
    chef: ${14:value}                                                      # The chef definition scope, used to configure the Sensu Enterprise Chef integration (Sensu Enterprise users only) 
    puppet: ${15:value}                                                    # The puppet definition scope, used to configure the Sensu Enterprise Puppet integration (Sensu Enterprise users only) 
    servicenow: ${16:value}                                                # The servicenow definition scope, used to configure the Sensu Enterprise ServiceNow integration (Sensu Enterprise users o
