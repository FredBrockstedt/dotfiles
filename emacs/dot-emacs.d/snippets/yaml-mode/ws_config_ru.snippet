# -*- mode: snippet -*-
# name: Manage AWS Config resources
# prefix: aws_config_rule_snippet
# key: ws_config_ru
# group: ansible
# --

- name: ${0:Manage AWS Config resources}
  aws_config_rule:                                                         
    name: ${1:The name of the AWS Config resource}                         #
    state: ${2$$(yas-choose-value '("present" "absent"))}                  # choices: present;absent  Whether the Config rule should be present or absent 
    description: ${3:value}                                                # The description that you provide for the AWS Config rule 
    scope: ${4:value}                                                      # Defines which resources can trigger an evaluation for the rule 
    source: ${5:value}                                                     # Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluat
    input_parameters: ${6:value}                                           # A string, in JSON format, that is passed to the AWS Config rule Lambda function 
    execution_frequency: ${7$$(yas-choose-value '("One_Hour" "Three_Hours" "Six_Hours" "Twelve_Hours" "TwentyFour_Hours"))}# choices: One_Hour;Three_Hours;Six_Hours;Twelve_Hours;TwentyFour_Hours  T
    debug_botocore_endpoint_logs: ${8:false}                               # Use a botocore endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, o
    ec2_url: ${9:value}                                                    # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)  Ignored for module
    aws_secret_key: ${10:value}                                            # AWS secret key  If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment va
    aws_access_key: ${11:value}                                            # AWS access key  If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variabl
    security_token: ${12:value}                                            # AWS STS security token  If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable i
    validate_certs: ${13:True}                                             # When set to "no", SSL certificates will not be validated for boto versions >= 2 6 0 
    profile: ${14:value}                                                   # Uses a boto profile  Only works with boto >= 2 24 0 
    region: ${15:value}                                                    # The AWS region to use  If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is 
